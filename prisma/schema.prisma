// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ShelterType {
  TEMPORARY
  PERMANENT
  MEDICAL
  EVACUATION
}

enum ShelterResource {
  FOOD
  WATER
  MEDICAL
  BLANKETS
  TOILETS
  INTERNET
  ELECTRICITY
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum DamageSeverity {
  MINOR
  MODERATE
  SEVERE
  CRITICAL
}

enum DamageType {
  PERSON
  STRUCTURAL
  INFRASTRUCTURE
  UTILITIES
  ROADS
  BRIDGES
  BUILDINGS
  OTHER
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Organization {
  id          String   @id @default(uuid())
  kindeOrgId  String   @unique
  name        String
  phone       String?
  displayName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       UserOrganization[]
  shelters    Shelter[]
  occupants   Occupant[]
}



model User {
  id        String   @id @default(uuid())
  kindeId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organizations UserOrganization[]
  pushSubscriptions PushSubscription[]
}

model UserOrganization {
  id             String           @id @default(uuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Shelter {
  id                String            @id @default(uuid())
  name              String
  location          String
  phone             String
  contactName       String?
  contactPhone      String?
  type              ShelterType
  capacity          Int
  currentOccupancy  Int              @default(0)
  isAvailable       Boolean           @default(true)
  isAccessible      Boolean?
  notes             String?
  resourcesAvailable ShelterResource[]
  latitude          Float
  longitude         Float
  organizationId    String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  organization      Organization?     @relation(fields: [organizationId], references: [id])
  occupants         Occupant[]

  @@index([type])
  @@index([isAvailable])
  @@index([latitude, longitude])
  @@index([organizationId])
}

model Occupant {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String?
  age         Int?
  gender      String?
  phone       String?
  emergencyContact String?
  emergencyContactPhone String?
  medicalConditions String?
  specialNeeds String?
  checkInTime DateTime @default(now())
  checkOutTime DateTime?
  isCheckedIn Boolean  @default(true)
  shelterId   String
  organizationId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  shelter      Shelter      @relation(fields: [shelterId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@index([shelterId])
  @@index([organizationId])
  @@index([isCheckedIn])
  @@index([checkInTime])
}

model PushSubscription {
  id            String   @id @default(uuid())
  endpoint      String   @unique
  p256dh        String
  auth          String
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EarthquakeAlert {
  id            String   @id @default(uuid())
  lastEarthquakeId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DamageReport {
  id              String         @id @default(uuid())
  title           String
  description     String
  location        String
  latitude        Float?
  longitude       Float?
  damageType      DamageType
  severity        DamageSeverity
  status          ReportStatus   @default(PENDING)
  estimatedCost   Float?
  affectedArea    String?
  priority        Int            @default(1)
  isPeopleDamaged  Boolean        @default(false)
  numberOfPeopleDamaged  Int?
  isUrgent        Boolean        @default(false)
  photos          String[]       // URLs to uploaded photos
  notes           String?
  
  // Anonymous user fields
  reporterName    String?        // Name provided by anonymous user
  reporterEmail   String?        // Email provided by anonymous user
  reporterPhone   String?        // Phone provided by anonymous user
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([status])
  @@index([severity])
  @@index([damageType])
  @@index([createdAt])
  @@index([isUrgent])
  @@index([isPeopleDamaged])
  @@index([numberOfPeopleDamaged])
}


